Description: Use python3 in tests
 Some upstream tests call the python interpreter in a subprocess, e.g. to test
 the custom `process` module or to run simple in-toto step or inspection
 commands. In debian, where we only build for python3, "python" is not
 available during build and thus makes those tests fail. This patch replaces
 "python" with "python3" where applicable.

Origin: upstream, https://github.com/in-toto/in-toto/commit/a7f4baf8d0186fa4a6314264707f4d5d1b3cecdc

diff --git a/tests/demo_files/demo.layout.template b/tests/demo_files/demo.layout.template
index 64ca250..0ac7f7e 100644
--- a/tests/demo_files/demo.layout.template
+++ b/tests/demo_files/demo.layout.template
@@ -25,7 +25,7 @@
             ],
             "name": "untar",
             "run": [
-                "python",
+                "python3",
                 "./scripts/tar",
                 "xfz",
                 "foo.tar.gz"
diff --git a/tests/test_in_toto_mock.py b/tests/test_in_toto_mock.py
index bef1ba5..5e87050 100644
--- a/tests/test_in_toto_mock.py
+++ b/tests/test_in_toto_mock.py
@@ -75,7 +75,7 @@ class TestInTotoMockTool(tests.common.CliTestCase):
   def test_main_required_args(self):
     """Test CLI command with required arguments. """
 
-    args = ["--name", self.test_step, "--", "python", "--version"]
+    args = ["--name", self.test_step, "--", "python3", "--version"]
     self.assert_cli_sys_exit(args, 0)
 
     self.assertTrue(os.path.exists(self.test_link))
diff --git a/tests/test_in_toto_run.py b/tests/test_in_toto_run.py
index 11511da..9a51e5c 100755
--- a/tests/test_in_toto_run.py
+++ b/tests/test_in_toto_run.py
@@ -97,7 +97,7 @@ class TestInTotoRunTool(tests.common.CliTestCase):
     """Test CLI command with required arguments. """
 
     args = ["--step-name", self.test_step, "--key", self.rsa_key_path, "--",
-        "python", "--version"]
+        "python3", "--version"]
 
     # Give wrong password whenever prompted.
     with mock.patch('in_toto.util.prompt_password', return_value='x'):
@@ -112,7 +112,7 @@ class TestInTotoRunTool(tests.common.CliTestCase):
     named_args = ["--step-name", self.test_step, "--key",
         self.rsa_key_path, "--materials", self.test_artifact, "--products",
         self.test_artifact, "--record-streams"]
-    positional_args = ["--", "python", "--version"]
+    positional_args = ["--", "python3", "--version"]
 
     # Give wrong password whenever prompted.
     with mock.patch('in_toto.util.prompt_password', return_value='x'):
@@ -187,7 +187,7 @@ class TestInTotoRunTool(tests.common.CliTestCase):
     """Test CLI command with specified gpg key. """
     args = ["-n", self.test_step,
             "--gpg", self.non_default_gpg_keyid,
-            "--gpg-home", self.gnupg_home, "--", "python", "--version"]
+            "--gpg-home", self.gnupg_home, "--", "python3", "--version"]
 
     self.assert_cli_sys_exit(args, 0)
     link_filename = FILENAME_FORMAT.format(step_name=self.test_step,
@@ -199,7 +199,7 @@ class TestInTotoRunTool(tests.common.CliTestCase):
   def test_main_with_default_gpg_key(self):
     """Test CLI command with default gpg key. """
     args = ["-n", self.test_step,
-            "--gpg", "--gpg-home", self.gnupg_home, "--", "python", "--version"]
+            "--gpg", "--gpg-home", self.gnupg_home, "--", "python3", "--version"]
 
     self.assert_cli_sys_exit(args, 0)
 
diff --git a/tests/test_process.py b/tests/test_process.py
index 080c45d..3e20bc3 100644
--- a/tests/test_process.py
+++ b/tests/test_process.py
@@ -38,7 +38,7 @@ class Test_Process(unittest.TestCase):
 
     stdin_file = open(path)
     cmd = \
-        "python -c \"import sys; assert(sys.stdin.read() == '{}')\""
+        "python3 -c \"import sys; assert(sys.stdin.read() == '{}')\""
 
     # input is used in favor of stdin
     in_toto.process.run(cmd.format("use input kwarg"),
@@ -56,7 +56,7 @@ class Test_Process(unittest.TestCase):
   def test_run_duplicate_streams(self):
     """Test output as streams and as returned.  """
     # Command that prints 'foo' to stdout and 'bar' to stderr.
-    cmd = ("python -c \""
+    cmd = ("python3 -c \""
         "import sys;"
         "sys.stdout.write('foo');"
         "sys.stderr.write('bar');\"")
@@ -100,7 +100,7 @@ class Test_Process(unittest.TestCase):
 
   def test_run_duplicate_streams_arg_return_code(self):
     """Test command arg as string and list and return code. """
-    cmd_str = ("python -c \""
+    cmd_str = ("python3 -c \""
         "import sys;"
         "sys.exit(100)\"")
     cmd_list = shlex.split(cmd_str)
@@ -113,7 +113,8 @@ class Test_Process(unittest.TestCase):
   def test_run_duplicate_streams_timeout(self):
     """Test raise TimeoutExpired. """
     with self.assertRaises(in_toto.process.subprocess.TimeoutExpired):
-      in_toto.process.run_duplicate_streams("python --version", timeout=-1)
+      in_toto.process.run_duplicate_streams("python3 --version",
+          timeout=-1)
 
 
 
diff --git a/tests/test_runlib.py b/tests/test_runlib.py
index 8a9ea50..c0d3b72 100755
--- a/tests/test_runlib.py
+++ b/tests/test_runlib.py
@@ -475,17 +475,17 @@ class TestInTotoRun(unittest.TestCase):
   def test_in_toto_run_verify_signature(self):
     """Successfully run, verify signed metadata. """
     link = in_toto_run(self.step_name, None, None,
-        ["python", "--version"], True, self.key)
+        ["python3", "--version"], True, self.key)
     link.verify_signature(self.key)
 
   def test_in_toto_run_no_signature(self):
     """Successfully run, verify empty signature field. """
-    link = in_toto_run(self.step_name, None, None, ["python", "--version"])
+    link = in_toto_run(self.step_name, None, None, ["python3", "--version"])
     self.assertFalse(len(link.signatures))
 
   def test_in_toto_run_with_byproduct(self):
     """Successfully run, verify recorded byproduct. """
-    link = in_toto_run(self.step_name, None, None, ["python", "--version"],
+    link = in_toto_run(self.step_name, None, None, ["python3", "--version"],
         record_streams=True)
 
     # this or clause may seem weird, but given that python 2 prints its version
@@ -498,14 +498,14 @@ class TestInTotoRun(unittest.TestCase):
 
   def test_in_toto_run_without_byproduct(self):
     """Successfully run, verify byproduct is not recorded. """
-    link = in_toto_run(self.step_name, None, None, ["python", "--version"],
+    link = in_toto_run(self.step_name, None, None, ["python3", "--version"],
         record_streams=False)
     self.assertFalse(len(link.signed.byproducts.get("stdout")))
 
   def test_in_toto_run_compare_dumped_with_returned_link(self):
     """Successfully run, compare dumped link is equal to returned link. """
     link = in_toto_run(self.step_name, [self.test_artifact],
-        [self.test_artifact], ["python", "--version"], True, self.key)
+        [self.test_artifact], ["python3", "--version"], True, self.key)
     link_dump = Metablock.load(
         FILENAME_FORMAT.format(step_name=self.step_name, keyid=self.key["keyid"]))
     self.assertEqual(repr(link), repr(link_dump))
@@ -513,13 +513,13 @@ class TestInTotoRun(unittest.TestCase):
   def test_in_toto_run_verify_recorded_artifacts(self):
     """Successfully run, verify properly recorded artifacts. """
     link = in_toto_run(self.step_name, [self.test_artifact],
-        [self.test_artifact], ["python", "--version"])
+        [self.test_artifact], ["python3", "--version"])
     self.assertEqual(list(link.signed.materials.keys()),
         list(link.signed.products.keys()), [self.test_artifact])
 
   def test_in_toto_run_verify_workdir(self):
     """Successfully run, verify cwd. """
-    link = in_toto_run(self.step_name, [], [], ["python", "--version"],
+    link = in_toto_run(self.step_name, [], [], ["python3", "--version"],
         record_environment=True)
     self.assertEqual(link.signed.environment["workdir"],
         os.getcwd().replace("\\", "/"))
@@ -537,7 +537,7 @@ class TestInTotoRun(unittest.TestCase):
 
       # Call in_toto_run and record artifacts as materials and products
       # with line ending normalization on
-      link = in_toto_run(self.step_name, paths, paths, ["python", "--version"],
+      link = in_toto_run(self.step_name, paths, paths, ["python3", "--version"],
           normalize_line_endings=True).signed
 
       # Check that all three hashes in materials and products are equal
@@ -555,13 +555,13 @@ class TestInTotoRun(unittest.TestCase):
     """Fail run, passed key is not properly formatted. """
     with self.assertRaises(securesystemslib.exceptions.FormatError):
       in_toto_run(self.step_name, None, None,
-          ["python", "--version"], True, "this-is-not-a-key")
+          ["python3", "--version"], True, "this-is-not-a-key")
 
   def test_in_toto_wrong_key(self):
     """Fail run, passed key is a public key. """
     with self.assertRaises(securesystemslib.exceptions.FormatError):
       in_toto_run(self.step_name, None, None,
-          ["python", "--version"], True, self.key_pub)
+          ["python3", "--version"], True, self.key_pub)
 
 
 class TestInTotoRecordStart(unittest.TestCase):
diff --git a/tests/test_verifylib.py b/tests/test_verifylib.py
index 96a4237..4055cae 100644
--- a/tests/test_verifylib.py
+++ b/tests/test_verifylib.py
@@ -101,7 +101,7 @@ class TestRunAllInspections(unittest.TestCase):
         "steps": [],
         "inspect": [{
           "name": "touch-bar",
-          "run": ["python", os.path.join(scripts_directory, "touch"), "bar"],
+          "run": ["python3", os.path.join(scripts_directory, "touch"), "bar"],
         }]
       })
 
@@ -141,7 +141,7 @@ class TestRunAllInspections(unittest.TestCase):
         "steps": [],
         "inspect": [{
           "name": "non-zero-inspection",
-          "run": ["python", "./scripts/expr", "1", "/", "0"],
+          "run": ["python3", "./scripts/expr", "1", "/", "0"],
         }]
     })
     with self.assertRaises(BadReturnValueError):
@@ -784,7 +784,7 @@ class TestInTotoVerify(unittest.TestCase):
 
     # dump layout with failing inspection retval
     layout = copy.deepcopy(layout_template)
-    layout.signed.inspect[0].run = ["python", "./scripts/expr", "1", "/", "0"]
+    layout.signed.inspect[0].run = ["python3", "./scripts/expr", "1", "/", "0"]
     layout.sign(alice)
     layout.dump(self.layout_failing_inspection_retval)
 
